//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFile([NotNull] LanguageParser.FileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFile([NotNull] LanguageParser.FileContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] LanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] LanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncHead([NotNull] LanguageParser.FuncHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncHead([NotNull] LanguageParser.FuncHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] LanguageParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] LanguageParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] LanguageParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] LanguageParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] LanguageParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] LanguageParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBody([NotNull] LanguageParser.BodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBody([NotNull] LanguageParser.BodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] LanguageParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] LanguageParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>conditionalStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] LanguageParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>conditionalStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] LanguageParser.ConditionalStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varAssignStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarAssignStatement([NotNull] LanguageParser.VarAssignStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varAssignStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarAssignStatement([NotNull] LanguageParser.VarAssignStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDeclStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclStatement([NotNull] LanguageParser.VarDeclStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDeclStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclStatement([NotNull] LanguageParser.VarDeclStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStatement([NotNull] LanguageParser.ExprStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStatement([NotNull] LanguageParser.ExprStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>retStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRetStatement([NotNull] LanguageParser.RetStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>retStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRetStatement([NotNull] LanguageParser.RetStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] LanguageParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] LanguageParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional([NotNull] LanguageParser.ConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional([NotNull] LanguageParser.ConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] LanguageParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] LanguageParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnd([NotNull] LanguageParser.EndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnd([NotNull] LanguageParser.EndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] LanguageParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] LanguageParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] LanguageParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] LanguageParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] LanguageParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] LanguageParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] LanguageParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] LanguageParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanOrEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpr([NotNull] LanguageParser.GreaterThanOrEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanOrEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpr([NotNull] LanguageParser.GreaterThanOrEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanOrEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpr([NotNull] LanguageParser.LessThanOrEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanOrEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpr([NotNull] LanguageParser.LessThanOrEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionExpr([NotNull] LanguageParser.AdditionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionExpr([NotNull] LanguageParser.AdditionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpr([NotNull] LanguageParser.LessThanExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpr([NotNull] LanguageParser.LessThanExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>funcCallExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCallExpr([NotNull] LanguageParser.FuncCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funcCallExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCallExpr([NotNull] LanguageParser.FuncCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intValueExper</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntValueExper([NotNull] LanguageParser.IntValueExperContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intValueExper</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntValueExper([NotNull] LanguageParser.IntValueExperContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameExpr([NotNull] LanguageParser.NameExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameExpr([NotNull] LanguageParser.NameExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivisionExpr([NotNull] LanguageParser.DivisionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivisionExpr([NotNull] LanguageParser.DivisionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtractionExpr([NotNull] LanguageParser.SubtractionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtractionExpr([NotNull] LanguageParser.SubtractionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpr([NotNull] LanguageParser.GreaterThanExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpr([NotNull] LanguageParser.GreaterThanExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationExpr([NotNull] LanguageParser.MultiplicationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationExpr([NotNull] LanguageParser.MultiplicationExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualExpr([NotNull] LanguageParser.NotEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqualExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualExpr([NotNull] LanguageParser.NotEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpr([NotNull] LanguageParser.ParenthesisExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpr([NotNull] LanguageParser.ParenthesisExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>equalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualExpr([NotNull] LanguageParser.EqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualExpr([NotNull] LanguageParser.EqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] LanguageParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] LanguageParser.NameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntvalue([NotNull] LanguageParser.IntvalueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntvalue([NotNull] LanguageParser.IntvalueContext context);
}
