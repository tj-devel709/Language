//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFile([NotNull] LanguageParser.FileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFile([NotNull] LanguageParser.FileContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc([NotNull] LanguageParser.FuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc([NotNull] LanguageParser.FuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncDeclaration([NotNull] LanguageParser.FuncDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncDeclaration([NotNull] LanguageParser.FuncDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncName([NotNull] LanguageParser.FuncNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncName([NotNull] LanguageParser.FuncNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncArguments([NotNull] LanguageParser.FuncArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncArguments([NotNull] LanguageParser.FuncArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncBody([NotNull] LanguageParser.FuncBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncBody([NotNull] LanguageParser.FuncBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional([NotNull] LanguageParser.ConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional([NotNull] LanguageParser.ConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] LanguageParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] LanguageParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditionalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalOperator([NotNull] LanguageParser.ConditionalOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditionalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalOperator([NotNull] LanguageParser.ConditionalOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] LanguageParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] LanguageParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnd([NotNull] LanguageParser.EndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnd([NotNull] LanguageParser.EndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.pseudoFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPseudoFunctions([NotNull] LanguageParser.PseudoFunctionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.pseudoFunctions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPseudoFunctions([NotNull] LanguageParser.PseudoFunctionsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint([NotNull] LanguageParser.PrintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint([NotNull] LanguageParser.PrintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.println"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintln([NotNull] LanguageParser.PrintlnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.println"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintln([NotNull] LanguageParser.PrintlnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] LanguageParser.FuncCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] LanguageParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] LanguageParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] LanguageParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] LanguageParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intValue</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntValue([NotNull] LanguageParser.IntValueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intValue</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntValue([NotNull] LanguageParser.IntValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionExpr([NotNull] LanguageParser.AdditionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionExpr([NotNull] LanguageParser.AdditionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationExpr([NotNull] LanguageParser.MultiplicationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationExpr([NotNull] LanguageParser.MultiplicationExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>word</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWord([NotNull] LanguageParser.WordContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>word</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWord([NotNull] LanguageParser.WordContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpr([NotNull] LanguageParser.ParenthesisExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpr([NotNull] LanguageParser.ParenthesisExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivisionExpr([NotNull] LanguageParser.DivisionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivisionExpr([NotNull] LanguageParser.DivisionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtractionExpr([NotNull] LanguageParser.SubtractionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtractionExpr([NotNull] LanguageParser.SubtractionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntvalue([NotNull] LanguageParser.IntvalueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntvalue([NotNull] LanguageParser.IntvalueContext context);
}
