//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TJ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TJParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public interface ITJListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFile([NotNull] TJParser.FileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFile([NotNull] TJParser.FileContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] TJParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] TJParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncHead([NotNull] TJParser.FuncHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.funcHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncHead([NotNull] TJParser.FuncHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] TJParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] TJParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] TJParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] TJParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] TJParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] TJParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBody([NotNull] TJParser.BodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBody([NotNull] TJParser.BodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] TJParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] TJParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>conditionalStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] TJParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>conditionalStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] TJParser.ConditionalStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varDeclarationListStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclarationListStatement([NotNull] TJParser.VarDeclarationListStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varDeclarationListStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclarationListStatement([NotNull] TJParser.VarDeclarationListStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>varAssignmentStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarAssignmentStatement([NotNull] TJParser.VarAssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>varAssignmentStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarAssignmentStatement([NotNull] TJParser.VarAssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStatement([NotNull] TJParser.ExprStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStatement([NotNull] TJParser.ExprStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>retStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRetStatement([NotNull] TJParser.RetStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>retStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRetStatement([NotNull] TJParser.RetStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] TJParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="TJParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] TJParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional([NotNull] TJParser.ConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.conditional"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional([NotNull] TJParser.ConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] TJParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] TJParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStatement([NotNull] TJParser.ElseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.elseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStatement([NotNull] TJParser.ElseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] TJParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] TJParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnd([NotNull] TJParser.EndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.end"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnd([NotNull] TJParser.EndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCall([NotNull] TJParser.FuncCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.funcCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCall([NotNull] TJParser.FuncCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] TJParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] TJParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] TJParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] TJParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationList([NotNull] TJParser.VariableDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationList([NotNull] TJParser.VariableDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] TJParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.variableAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] TJParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] TJParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] TJParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] TJParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] TJParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanOrEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanOrEqualExpr([NotNull] TJParser.GreaterThanOrEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanOrEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanOrEqualExpr([NotNull] TJParser.GreaterThanOrEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanOrEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanOrEqualExpr([NotNull] TJParser.LessThanOrEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanOrEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanOrEqualExpr([NotNull] TJParser.LessThanOrEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalAndExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpr([NotNull] TJParser.LogicalAndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalAndExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpr([NotNull] TJParser.LogicalAndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditionExpr([NotNull] TJParser.AdditionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditionExpr([NotNull] TJParser.AdditionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lessThanExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLessThanExpr([NotNull] TJParser.LessThanExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lessThanExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLessThanExpr([NotNull] TJParser.LessThanExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] TJParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] TJParser.OrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>funcCallExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCallExpr([NotNull] TJParser.FuncCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funcCallExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCallExpr([NotNull] TJParser.FuncCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intValueExper</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntValueExper([NotNull] TJParser.IntValueExperContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intValueExper</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntValueExper([NotNull] TJParser.IntValueExperContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameExpr([NotNull] TJParser.NameExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nameExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameExpr([NotNull] TJParser.NameExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivisionExpr([NotNull] TJParser.DivisionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divisionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivisionExpr([NotNull] TJParser.DivisionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtractionExpr([NotNull] TJParser.SubtractionExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtractionExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtractionExpr([NotNull] TJParser.SubtractionExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>greaterThanExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGreaterThanExpr([NotNull] TJParser.GreaterThanExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>greaterThanExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGreaterThanExpr([NotNull] TJParser.GreaterThanExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOrExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpr([NotNull] TJParser.LogicalOrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOrExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpr([NotNull] TJParser.LogicalOrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] TJParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] TJParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicationExpr([NotNull] TJParser.MultiplicationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicationExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicationExpr([NotNull] TJParser.MultiplicationExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqualExpr([NotNull] TJParser.NotEqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqualExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqualExpr([NotNull] TJParser.NotEqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpr([NotNull] TJParser.ParenthesisExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpr([NotNull] TJParser.ParenthesisExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>equalExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualExpr([NotNull] TJParser.EqualExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equalExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualExpr([NotNull] TJParser.EqualExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] TJParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="TJParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] TJParser.AndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] TJParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] TJParser.NameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TJParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntvalue([NotNull] TJParser.IntvalueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TJParser.intvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntvalue([NotNull] TJParser.IntvalueContext context);
}
