//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, WORD=28, NEGATIVE=29, NOT=30, NEWLINE=31, 
		INT=32, WHITESPACE=33;
	public const int
		RULE_file = 0, RULE_func = 1, RULE_funcDeclaration = 2, RULE_funcName = 3, 
		RULE_funcArguments = 4, RULE_funcBody = 5, RULE_conditional = 6, RULE_ifStatement = 7, 
		RULE_condition = 8, RULE_conditionalOperator = 9, RULE_returnStatement = 10, 
		RULE_elseStatement = 11, RULE_end = 12, RULE_pseudoFunctions = 13, RULE_print = 14, 
		RULE_println = 15, RULE_funcCall = 16, RULE_variableDeclaration = 17, 
		RULE_variableAssignment = 18, RULE_expr = 19, RULE_intvalue = 20;
	public static readonly string[] ruleNames = {
		"file", "func", "funcDeclaration", "funcName", "funcArguments", "funcBody", 
		"conditional", "ifStatement", "condition", "conditionalOperator", "returnStatement", 
		"elseStatement", "end", "pseudoFunctions", "print", "println", "funcCall", 
		"variableDeclaration", "variableAssignment", "expr", "intvalue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'begin'", "'('", "','", "')'", "'if'", "'then begin'", 
		"'<='", "'<'", "'>='", "'>'", "'=='", "'!='", "'return'", "';'", "'else begin'", 
		"'end'", "'print'", "'println'", "'var'", "'<-'", "'*'", "'/'", "'+'", 
		"'and'", "'or'", "'^'", null, "'-'", "'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "WORD", "NEGATIVE", "NOT", "NEWLINE", "INT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(LanguageParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(LanguageParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 42;
				Match(NEWLINE);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 48;
				func();
				State = 49;
				Match(NEWLINE);
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody() {
			return GetRuleContext<FuncBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 2, RULE_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			funcDeclaration();
			State = 57;
			funcBody();
			State = 58;
			end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentsContext funcArguments() {
			return GetRuleContext<FuncArgumentsContext>(0);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__0);
			State = 61;
			funcName();
			State = 62;
			funcArguments();
			State = 63;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncName(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(LanguageParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(LanguageParser.WORD, i);
		}
		public FuncArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncArgumentsContext funcArguments() {
		FuncArgumentsContext _localctx = new FuncArgumentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__2);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORD) {
				{
				State = 68;
				Match(WORD);
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 69;
					Match(T__3);
					State = 70;
					Match(WORD);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 78;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(LanguageParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(LanguageParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext[] funcBody() {
			return GetRuleContexts<FuncBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncBodyContext funcBody(int i) {
			return GetRuleContext<FuncBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableAssignmentContext variableAssignment() {
			return GetRuleContext<VariableAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoFunctionsContext pseudoFunctions() {
			return GetRuleContext<PseudoFunctionsContext>(0);
		}
		public FuncBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncBody(this);
		}
	}

	[RuleVersion(0)]
	public FuncBodyContext funcBody() {
		FuncBodyContext _localctx = new FuncBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcBody);
		try {
			int _alt;
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(NEWLINE);
				State = 81;
				funcBody();
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 82;
						Match(NEWLINE);
						}
						} 
					}
					State = 87;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 88;
					funcBody();
					}
					break;
				}
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				conditional();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				variableDeclaration();
				}
				break;
			case WORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				variableAssignment();
				}
				break;
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				pseudoFunctions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterConditional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitConditional(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 12, RULE_conditional);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				ifStatement();
				State = 99;
				elseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__5);
			State = 104;
			condition();
			State = 105;
			Match(T__6);
			State = 106;
			returnStatement();
			State = 107;
			end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(LanguageParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(LanguageParser.WORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOperatorContext conditionalOperator() {
			return GetRuleContext<ConditionalOperatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(WORD);
			State = 110;
			conditionalOperator();
			State = 111;
			Match(WORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOperatorContext : ParserRuleContext {
		public ConditionalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterConditionalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitConditionalOperator(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOperatorContext conditionalOperator() {
		ConditionalOperatorContext _localctx = new ConditionalOperatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_conditionalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LanguageParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(NEWLINE);
			State = 116;
			Match(T__13);
			State = 117;
			Match(WORD);
			State = 118;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__15);
			State = 121;
			returnStatement();
			State = 122;
			end();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LanguageParser.NEWLINE, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 24, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(NEWLINE);
			State = 125;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoFunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintlnContext println() {
			return GetRuleContext<PrintlnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PseudoFunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoFunctions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPseudoFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPseudoFunctions(this);
		}
	}

	[RuleVersion(0)]
	public PseudoFunctionsContext pseudoFunctions() {
		PseudoFunctionsContext _localctx = new PseudoFunctionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_pseudoFunctions);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				println();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				print();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 28, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__17);
			State = 132;
			funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public PrintlnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_println; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPrintln(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPrintln(this);
		}
	}

	[RuleVersion(0)]
	public PrintlnContext println() {
		PrintlnContext _localctx = new PrintlnContext(Context, State);
		EnterRule(_localctx, 30, RULE_println);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__18);
			State = 135;
			funcCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncArgumentsContext funcArguments() {
			return GetRuleContext<FuncArgumentsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_funcCall);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				Match(T__2);
				State = 138;
				Match(WORD);
				State = 139;
				funcArguments();
				State = 140;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				funcArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__19);
			State = 146;
			Match(WORD);
			State = 147;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public VariableAssignmentContext variableAssignment() {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_variableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(WORD);
			State = 150;
			Match(T__20);
			State = 151;
			expr(0);
			State = 152;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
	}
	public partial class IntValueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntvalueContext intvalue() {
			return GetRuleContext<IntvalueContext>(0);
		}
		public IntValueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIntValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIntValue(this);
		}
	}
	public partial class AdditionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AdditionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAdditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAdditionExpr(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
	}
	public partial class WordContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(LanguageParser.WORD, 0); }
		public WordContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
	}
	public partial class ParenthesisExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenthesisExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParenthesisExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParenthesisExpr(this);
		}
	}
	public partial class DivisionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivisionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDivisionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDivisionExpr(this);
		}
	}
	public partial class SubtractionExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATIVE() { return GetToken(LanguageParser.NEGATIVE, 0); }
		public SubtractionExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterSubtractionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitSubtractionExpr(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEGATIVE:
			case NOT:
			case INT:
				{
				_localctx = new IntValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 155;
				intvalue();
				}
				break;
			case WORD:
				{
				_localctx = new WordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 156;
				Match(WORD);
				}
				break;
			case T__2:
				{
				_localctx = new ParenthesisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				Match(T__2);
				State = 158;
				expr(0);
				State = 159;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 184;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 163;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						{
						State = 164;
						Match(T__21);
						}
						State = 165;
						expr(11);
						}
						break;
					case 2:
						{
						_localctx = new DivisionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 166;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						{
						State = 167;
						Match(T__22);
						}
						State = 168;
						expr(10);
						}
						break;
					case 3:
						{
						_localctx = new AdditionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 169;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 170;
						Match(T__23);
						}
						State = 171;
						expr(9);
						}
						break;
					case 4:
						{
						_localctx = new SubtractionExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 172;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 173;
						Match(NEGATIVE);
						}
						State = 174;
						expr(8);
						}
						break;
					case 5:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 175;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 176;
						Match(T__24);
						}
						State = 177;
						expr(7);
						}
						break;
					case 6:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 178;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 179;
						Match(T__25);
						}
						State = 180;
						expr(6);
						}
						break;
					case 7:
						{
						_localctx = new NotExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 181;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 182;
						Match(T__26);
						}
						State = 183;
						expr(5);
						}
						break;
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IntvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATIVE() { return GetToken(LanguageParser.NEGATIVE, 0); }
		public IntvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIntvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIntvalue(this);
		}
	}

	[RuleVersion(0)]
	public IntvalueContext intvalue() {
		IntvalueContext _localctx = new IntvalueContext(Context, State);
		EnterRule(_localctx, 40, RULE_intvalue);
		int _la;
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 189;
					Match(NOT);
					}
				}

				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEGATIVE) {
					{
					State = 192;
					Match(NEGATIVE);
					}
				}

				State = 195;
				Match(INT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEGATIVE) {
					{
					State = 196;
					Match(NEGATIVE);
					}
				}

				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 199;
					Match(NOT);
					}
				}

				State = 202;
				Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xD0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x39', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'J', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'M', '\v', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'V', 
		'\n', '\a', '\f', '\a', '\xE', '\a', 'Y', '\v', '\a', '\x3', '\a', '\x5', 
		'\a', '\\', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x62', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x84', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x92', '\n', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xA4', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xBB', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xBE', '\v', '\x15', '\x3', 
		'\x16', '\x5', '\x16', '\xC1', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xC4', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xC8', 
		'\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\xCB', '\n', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\xCE', '\n', '\x16', '\x3', '\x16', '\x2', '\x3', 
		'(', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x3', '\x3', '\x2', '\n', '\xF', '\x2', '\xD5', '\x2', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ':', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'>', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x45', '\x3', '\x2', '\x2', '\x2', '\f', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'g', '\x3', '\x2', '\x2', '\x2', '\x10', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'o', '\x3', '\x2', '\x2', '\x2', '\x14', 
		's', '\x3', '\x2', '\x2', '\x2', '\x16', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'z', '\x3', '\x2', '\x2', '\x2', '\x1A', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x83', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x85', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x88', '\x3', '\x2', '\x2', '\x2', '\"', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x93', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '(', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xCD', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '!', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x37', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\x4', '\x3', 
		'\x2', '\x33', '\x34', '\a', '!', '\x2', '\x2', '\x34', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x5', '\x6', '\x4', '\x2', ';', '<', '\x5', '\f', '\a', '\x2', '<', 
		'=', '\x5', '\x1A', '\xE', '\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\x3', '\x2', '\x2', '?', '@', '\x5', '\b', '\x5', '\x2', 
		'@', '\x41', '\x5', '\n', '\x6', '\x2', '\x41', '\x42', '\a', '\x4', '\x2', 
		'\x2', '\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\x1E', '\x2', '\x2', '\x44', '\t', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'N', '\a', '\x5', '\x2', '\x2', '\x46', 'K', '\a', '\x1E', '\x2', '\x2', 
		'G', 'H', '\a', '\x6', '\x2', '\x2', 'H', 'J', '\a', '\x1E', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x46', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\a', '\x2', 
		'\x2', 'Q', '\v', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '!', '\x2', 
		'\x2', 'S', 'W', '\x5', '\f', '\a', '\x2', 'T', 'V', '\a', '!', '\x2', 
		'\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\x5', '\f', '\a', '\x2', '[', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x62', '\x3', '\x2', 
		'\x2', '\x2', ']', '\x62', '\x5', '\xE', '\b', '\x2', '^', '\x62', '\x5', 
		'$', '\x13', '\x2', '_', '\x62', '\x5', '&', '\x14', '\x2', '`', '\x62', 
		'\x5', '\x1C', '\xF', '\x2', '\x61', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x61', ']', '\x3', '\x2', '\x2', '\x2', '\x61', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\r', '\x3', '\x2', '\x2', '\x2', '\x63', 'h', '\x5', 
		'\x10', '\t', '\x2', '\x64', '\x65', '\x5', '\x10', '\t', '\x2', '\x65', 
		'\x66', '\x5', '\x18', '\r', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'g', '\x63', '\x3', '\x2', '\x2', '\x2', 'g', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\xF', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', 
		'\b', '\x2', '\x2', 'j', 'k', '\x5', '\x12', '\n', '\x2', 'k', 'l', '\a', 
		'\t', '\x2', '\x2', 'l', 'm', '\x5', '\x16', '\f', '\x2', 'm', 'n', '\x5', 
		'\x1A', '\xE', '\x2', 'n', '\x11', '\x3', '\x2', '\x2', '\x2', 'o', 'p', 
		'\a', '\x1E', '\x2', '\x2', 'p', 'q', '\x5', '\x14', '\v', '\x2', 'q', 
		'r', '\a', '\x1E', '\x2', '\x2', 'r', '\x13', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\t', '\x2', '\x2', '\x2', 't', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '!', '\x2', '\x2', 'v', 'w', '\a', '\x10', '\x2', 
		'\x2', 'w', 'x', '\a', '\x1E', '\x2', '\x2', 'x', 'y', '\a', '\x11', '\x2', 
		'\x2', 'y', '\x17', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\x12', 
		'\x2', '\x2', '{', '|', '\x5', '\x16', '\f', '\x2', '|', '}', '\x5', '\x1A', 
		'\xE', '\x2', '}', '\x19', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', 
		'!', '\x2', '\x2', '\x7F', '\x80', '\a', '\x13', '\x2', '\x2', '\x80', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x5', ' ', '\x11', 
		'\x2', '\x82', '\x84', '\x5', '\x1E', '\x10', '\x2', '\x83', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x14', '\x2', 
		'\x2', '\x86', '\x87', '\x5', '\"', '\x12', '\x2', '\x87', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x15', '\x2', '\x2', '\x89', 
		'\x8A', '\x5', '\"', '\x12', '\x2', '\x8A', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '\x5', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'\x1E', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\n', '\x6', '\x2', '\x8E', 
		'\x8F', '\a', '\a', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x92', '\x5', '\n', '\x6', '\x2', '\x91', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x16', '\x2', 
		'\x2', '\x94', '\x95', '\a', '\x1E', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x11', '\x2', '\x2', '\x96', '%', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\a', '\x1E', '\x2', '\x2', '\x98', '\x99', '\a', '\x17', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '(', '\x15', '\x2', '\x9A', '\x9B', '\a', 
		'\x11', '\x2', '\x2', '\x9B', '\'', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\b', '\x15', '\x1', '\x2', '\x9D', '\xA4', '\x5', '*', '\x16', 
		'\x2', '\x9E', '\xA4', '\a', '\x1E', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\x5', '\x2', '\x2', '\xA0', '\xA1', '\x5', '(', '\x15', '\x2', '\xA1', 
		'\xA2', '\a', '\a', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\f', '\f', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\x18', '\x2', '\x2', '\xA7', '\xBB', '\x5', 
		'(', '\x15', '\r', '\xA8', '\xA9', '\f', '\v', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '\x19', '\x2', '\x2', '\xAA', '\xBB', '\x5', '(', '\x15', '\f', 
		'\xAB', '\xAC', '\f', '\n', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x1A', 
		'\x2', '\x2', '\xAD', '\xBB', '\x5', '(', '\x15', '\v', '\xAE', '\xAF', 
		'\f', '\t', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x1F', '\x2', '\x2', 
		'\xB0', '\xBB', '\x5', '(', '\x15', '\n', '\xB1', '\xB2', '\f', '\b', 
		'\x2', '\x2', '\xB2', '\xB3', '\a', '\x1B', '\x2', '\x2', '\xB3', '\xBB', 
		'\x5', '(', '\x15', '\t', '\xB4', '\xB5', '\f', '\a', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x1C', '\x2', '\x2', '\xB6', '\xBB', '\x5', '(', '\x15', 
		'\b', '\xB7', '\xB8', '\f', '\x6', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'\x1D', '\x2', '\x2', '\xB9', '\xBB', '\x5', '(', '\x15', '\a', '\xBA', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		')', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC1', '\a', ' ', '\x2', '\x2', '\xC0', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\a', '\x1F', '\x2', 
		'\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xCE', '\a', '\"', '\x2', '\x2', '\xC6', '\xC8', '\a', '\x1F', '\x2', 
		'\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCB', '\a', ' ', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCE', '\a', '\"', '\x2', '\x2', '\xCD', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '+', '\x3', '\x2', '\x2', '\x2', '\x14', '/', '\x37', 'K', 
		'N', 'W', '[', '\x61', 'g', '\x83', '\x91', '\xA3', '\xBA', '\xBC', '\xC0', 
		'\xC3', '\xC7', '\xCA', '\xCD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
